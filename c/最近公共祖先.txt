/*玄学返回，gcc检测为空不回跳？？？*/
/*给出一棵有N个节点的有根树TREE（根的编号为1），对于每组查询，请输出树上节点u和v的最近公共祖先。
最近公共祖先：对于有向树TREE的两个结点u,v。最近公共祖先LCA（TREE u,v）表示一个节点x，满足x是u、v的祖先且x的深度尽可能大。
输入格式
输入数据第一行是一个整数T（1<=T<=100），表示测试数据的组数。
对于每组测试数据：
第一行是一个正整数N（1<=N<=100），表示树上有N个节点。
接下来N-1行，每行两个整数u,v(1<=u,v<=N)，表示节点u是v的父节点。
接下来一行是一个整数M（1<=M<=1000），表示查询的数量。
接下来M行，每行两个整数u,v(11<=u,v<=N)，表示查询节点u和节点v的最近公共祖先。
输出格式
对于每个查询，输出一个整数，表示最近公共祖先的编号，
输入样例
2
3
1 2
1 3
1
2 3


4
1 2
1 3
3 4
2
2 3
3 4


1
1
3*/#include<stdio.h>
#include<stdlib.h>
#include<vector>
struct nodes
{
	int fa;
	int num;
	std::vector<nodes *>p;
};
nodes *find(nodes *a, int b) {
	if (a->num == b)
		return a;
	else {
		nodes *c;
		c = (nodes *)malloc(sizeof(nodes));
		c->num = 0;
		int t = a->p.size();
		// printf("%d %d\n", t , b);
		for (int i = 0; i < t; i++) {
			c = find(a->p[i], b);
			// printf("%d %d %d\n", i , c->num, b );
			if (c->num == b)
				return c;
		}
		return c;
	}
	// return NULL;
}
nodes *findord(nodes *le, nodes *a, nodes *b) {
	// printf("%d %d\n", a->num, b->num );
	// printf("%d %d\n", a->fa, b->fa);

	if (a->fa == b->fa) {
		if (a->num != b->num)
			return find(le, a->fa);
		else
			return a;
	} else {
		if (a->num < b->num)
			return findord(le, a, find(le, b->fa));
		else
			return findord(le, find(le, a->fa), b );
	}
}
int main() {
	int n;
	scanf("%d", &n);
	for (int e = 0; e < n; e++) {
		int m;
		scanf("%d", &m);
		nodes *a;
		a = (nodes *)malloc(sizeof(nodes));
		a->num = 1;
		a->fa = -1;
		for (int r = 0; r < m - 1; r++) {
			int b, c;
			scanf("%d %d", &b, &c);
			nodes *d;
			d = find(a, b);
			nodes *t;
			t = (nodes *)malloc(sizeof(nodes));
			t->num = c;
			t->fa = b;
			d->p.push_back(t);
		}
		// printf("%d\n", a->p[0]->num );
		int l;
		scanf("%d", &l);
		for (int r = 0; r < l; r++) {
			int b, c;
			scanf("%d %d", &b, &c);
			// printf("%d %d\n", b, c );
			nodes *i, *j, *k;
			// nodes *i, *j;
			i = find(a, b);
			j = find(a, c);
			// printf("%d %d\n", i->num, j->num);
			k = findord(a, i, j);
			printf("%d\n", k->num );
		}
	}
	system("pause");
	return 0;
}