/*给定一棵带权二叉树，请判断它是不是一个最小堆。
一棵二叉树是一个最小堆，当且仅当对于树上任意一个节点，它的权值都小于或等于以它为根的子树中的所有权值。
输入格式
输入数据第一行是一个整数T（1<=T<=100），表示测试数据的组数。
对于每组测试数据：
第一行是一个整数N（1<=N<=100），表示树的节点个数。
接下来一行包含N个正整数，第i个整数valuei(1<=valuei<=1000)表示编号i的点的权值。
接下来N-1行，每行两个整数u和v（1<=u，v<=N, u!=v），表示节点u是节点v的父节点。
测试数据保证给定的一定是一棵二叉树，并且节点1是树的根结点。
输出格式
对于每组测试数据，如果给定的树是一个最小堆则输出Yes，否则输出No。
输入样例
3

1
10

3
10 5 3
1 2
1 3

5
1 2 3 4 5
1 3
1 2
2 4
2 5
输出样例
Yes
No
Yes*/
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<vector>
int main() {
	int n;
	scanf("%d", &n);
	for (int e = 0; e < n; e++) {
		int m;
		scanf("%d", &m);
		int *a = (int *)malloc(sizeof(int) * m);
		for (int r = 0; r < m; r++) {
			scanf("%d", &a[r]);
		}
		int flag = 1;
		for (int r = 0; r < m - 1; r++) {
			int i, j;
			scanf("%d %d", &i, &j);
			if (a[i - 1] > a[j - 1])
				flag = 0;
		}
		if (flag == 1)
			printf("Yes\n");
		else
			printf("No\n");
	}
	system("pause");
	return 0;
}