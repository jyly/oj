/*我们将仅由若干个同一小写字母构成的字符串称之为简单串，例如"aaaa"是一个简单串，而"abcd"则不是简单串。现在给你一个仅由小写字母组成的字符串，你需要用最小的花费，将其转换成一个简单串。 花费的计算规则如下：将a到z这26个小写字母从左到右排成一排，则每个字母都有左右两个邻居，我们认为a的左邻居是z，z的右邻居是a。一个字母只能转换成其相邻的字母，转换的花费为1。一个字母可以进行多次转换，例如将a转换成d，可以进行如下的步骤: a->b->c->d，花费为3。字符串的转换花费为所有字母转换花费之和。例如将字符串"abbbz"转换成简单串的最小花费为3，转换后的结果为"bbbbb"。
InputFormat
第一行一个整数T(T≤100)，表示测试数据的组数。 每组测试数据只有一行，为仅含小写字母的字符串，字符串长度不超过1000。
OutputFormat
对于每一组数据，输出一个整数，表示将字符串转换成简单串的最小花费。*/
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#define min(a,b) a>b?b:a
int main() {
	int n;
	scanf("%d\n", &n);
	int t[26][26];
	for (int i = 0; i < 26; i++) {
		for (int j = 0; j < 26; j++)
			t[i][j] = min(abs(i - j), 26 - abs(i - j));
	}
	for (int i = 0; i < n; i++) {
		char a[1000];
		int b[26] = {0};
		for (int j = 0; j < 1000; j++) {
			scanf("%c", &a[j]);
			if (a[j] == '\n')
				break;
			b[(int)(a[j] - 'a')]++;

		}
		int count[26] = {0};
		for (int j = 0; j < 26; j++) {
			for (int k = 0; k < 26; k++) {
				count[j] += t[j][k] * b[k];
			}
		}

		int min = 0;
		for (int j = 1; j < 26; j++)
			if (count[j] < count[min])
				min = j;
		printf("%d\n", count[min] );
	}
	system("pause");
	return 0;

}